options
{
 LOOKAHEAD=2;
}
PARSER_BEGIN(Calculator)
import java.util.HashMap;
public class Calculator
{
	public static HashMap<String, Integer> map = new HashMap<String, Integer>();

 public static void main(String args[]) throws ParseException {
	Calculator myCalc = new Calculator(System.in);
	SimpleNode root = myCalc.Expression(); // devolve referência para o nó raiz da árvore

	root.dump(""); // imprime no ecrã a árvore
	System.out.println("Valor da expressão: "+myCalc.eval(root));
 }
 
 public void putValue(String k, int v){
	map.put(k,v);
 }
 
 public void getValue(String k){
	map.get(k);
 }
 
 int eval(SimpleNode node) {
 
	System.out.println("n de filhos: "+node.jjtGetNumChildren());
 
	if(node.jjtGetNumChildren() == 0) // leaf node with integer value
		return node.val;
	else if(node.jjtGetNumChildren() == 1) // only one child
		return this.eval((SimpleNode) node.jjtGetChild(0));
	SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); //left child
	SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // right child
	switch(node.id) {
		case CalculatorTreeConstants.JJTADD : return eval( lhs ) + eval( rhs );
		case CalculatorTreeConstants.JJTSUB : return eval( lhs ) - eval( rhs );
		case CalculatorTreeConstants.JJTMUL : return eval( lhs ) * eval( rhs );
		case CalculatorTreeConstants.JJTDIV : return eval( lhs ) / eval( rhs );
		default : // abort
			System.out.println("Operador ilegal!");
			System.exit(1);
	}
	return 0;
}
 
}
PARSER_END(Calculator)

SKIP:{" "| "\r" | "\t"}

TOKEN:{< INTEGER:(["0"-"9"])+ >|<SYMBOL:["a"-"z","A"-"Z"](["0"-"9","a"-"z","A"-"Z"])*>|< LF: "\n" >}

SimpleNode Expression(): {Token k,v;}
{
 (k=<SYMBOL>"="v=<INTEGER> {map.put(k.image,Integer.parseInt(v.image));}";" <LF>)* Expr1()";" <LF> {return jjtThis;} // código Java entre chavetas (jjThis representa o nó)
}

void Expr1() #void: {}
{ Expr2(1)  [("+" Expr2(1) #Add(2)| "-" Expr2(1) #Sub(2))]}

void Expr2(int sign) #void: {} // 1: positive; -1: negative
{
 Expr3(sign)("*" Expr3(1) #Mul(2)| "/" Expr3(1) #Div(2))?
}


void Expr3(int sign) #void: {Token t;}
{
 (t=<INTEGER>{jjtThis.val = sign * Integer.parseInt(t.image);}| t=<SYMBOL>{jjtThis.val = sign * map.get(t.image);}) #Term | "-" Expr3(-1)| "(" Expr1() ")"
}
